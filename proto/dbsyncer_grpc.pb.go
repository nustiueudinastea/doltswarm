// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/dbsyncer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DBSyncer_AdvertiseHead_FullMethodName = "/proto.DBSyncer/AdvertiseHead"
)

// DBSyncerClient is the client API for DBSyncer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DBSyncerClient interface {
	AdvertiseHead(ctx context.Context, in *AdvertiseHeadRequest, opts ...grpc.CallOption) (*AdvertiseHeadResponse, error)
}

type dBSyncerClient struct {
	cc grpc.ClientConnInterface
}

func NewDBSyncerClient(cc grpc.ClientConnInterface) DBSyncerClient {
	return &dBSyncerClient{cc}
}

func (c *dBSyncerClient) AdvertiseHead(ctx context.Context, in *AdvertiseHeadRequest, opts ...grpc.CallOption) (*AdvertiseHeadResponse, error) {
	out := new(AdvertiseHeadResponse)
	err := c.cc.Invoke(ctx, DBSyncer_AdvertiseHead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBSyncerServer is the server API for DBSyncer service.
// All implementations should embed UnimplementedDBSyncerServer
// for forward compatibility
type DBSyncerServer interface {
	AdvertiseHead(context.Context, *AdvertiseHeadRequest) (*AdvertiseHeadResponse, error)
}

// UnimplementedDBSyncerServer should be embedded to have forward compatible implementations.
type UnimplementedDBSyncerServer struct {
}

func (UnimplementedDBSyncerServer) AdvertiseHead(context.Context, *AdvertiseHeadRequest) (*AdvertiseHeadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdvertiseHead not implemented")
}

// UnsafeDBSyncerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DBSyncerServer will
// result in compilation errors.
type UnsafeDBSyncerServer interface {
	mustEmbedUnimplementedDBSyncerServer()
}

func RegisterDBSyncerServer(s grpc.ServiceRegistrar, srv DBSyncerServer) {
	s.RegisterService(&DBSyncer_ServiceDesc, srv)
}

func _DBSyncer_AdvertiseHead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvertiseHeadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBSyncerServer).AdvertiseHead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBSyncer_AdvertiseHead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBSyncerServer).AdvertiseHead(ctx, req.(*AdvertiseHeadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DBSyncer_ServiceDesc is the grpc.ServiceDesc for DBSyncer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DBSyncer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DBSyncer",
	HandlerType: (*DBSyncerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdvertiseHead",
			Handler:    _DBSyncer_AdvertiseHead_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dbsyncer.proto",
}
